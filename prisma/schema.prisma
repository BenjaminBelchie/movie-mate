// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Friend {
  id        String @id @default(cuid())
  status    FriendStatus
  userId    String
  friendId  String
  user      User   @relation("UserFriends", fields: [userId], references: [id])
  friend    User   @relation("Friends", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model UserWatchlist {
     id     String @id @default(cuid())
     userId String @unique
     user   User @relation(fields: [userId], references: [id])
     films  FilmOnWatchlist[]
}

model FilmOnWatchlist {
  id           String @id @default(cuid())
  filmId       Int
  watchlistId  String
  film         Film @relation(fields: [filmId], references: [id])
  watchlist    UserWatchlist @relation(fields: [watchlistId], references: [id])
  dateAdded    DateTime @default(now())
  addedById    String
  addedBy      User @relation(fields: [addedById], references: [id])
  @@unique([filmId, watchlistId])
}

model Film {
    id     Int @id @unique
    adult       Boolean
    backdrop_path String
    watchProviders FilmWatchProviders[]
    original_language String
    overview String
    popularity Float
    poster_path String
    release_date String
    title String
    vote_average Float
    watchlistId String
    watchlist   FilmOnWatchlist[]
}

model FilmWatchProviders {
    id          String @id @default(cuid())
    filmId      Int
    film        Film @relation(fields: [filmId], references: [id])
    providerId Int
    provider WatchProvider @relation(fields: [providerId], references: [provider_id])
}

model WatchProvider {
    provider_id     Int @id @unique
    provider_name   String
    logo_path       String
    films           FilmWatchProviders[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    friends       Friend[]  @relation("UserFriends")
    users         Friend[] @relation("Friends")
    addedFilms FilmOnWatchlist[]
    watchlist     UserWatchlist?
    watchlistId   String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum FriendStatus {
  REQUESTED
  ACCEPTED
}
